@page "/boards/{id}/{name}"
@using Harmony.Application.DTO;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Board> _localizer

@if (!KanbanStore.BoardLoading)
{
    <MudPaper Elevation="25">
        <MudToolBar>
            <MudButton Variant="Variant.Text" OnClick="OpenCreateBoardListModal" StartIcon="@Icons.Material.Outlined.Checklist">Create list</MudButton>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
        </MudToolBar>
    </MudPaper>
    <MudDropContainer T="CardDto" @ref="_dropContainer"
                      Items="KanbanStore.KanbanCards"
                      ItemsSelector="@((item,column) => item.BoardListId.ToString() == column)"
                      ItemDropped="CardMoved" Class="d-flex flex-row">
        <ChildContent>
            @foreach (var item in KanbanStore.KanbanLists.OrderBy(l => l.Position))
            {
                <MudPaper Elevation="0" Width="300px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                    <MudToolBar DisableGutters="true">
                        <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                        <MudSpacer />
                        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                            <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => ArchiveList(item))">Archive</MudButton>
                            <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
                        </MudMenu>
                    </MudToolBar>
                    <MudDropZone T="CardDto" Identifier="@item.Id.ToString()" Class="mud-height-full" AllowReorder="true" />
                    @if (item.CreateCard.NewTaskOpen)
                    {
                        <EditForm Model="item.CreateCard" OnValidSubmit="() => AddCard(item)">
                            <DataAnnotationsValidator />
                            <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                                <MudTextField Clearable="true" For="() => item.CreateCard.Name" Lines="2" @bind-Value="item.CreateCard.Name" Placeholder="Card's name.." DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                                <div class="d-flex justify-space-around flex-grow-1 gap-4">
                                    <MudButton OnClick="@(() => item.CreateCard.NewTaskOpen = !item.CreateCard.NewTaskOpen)" StartIcon="@Icons.Material.Rounded.Cancel" Color="Color.Primary">Cancel</MudButton>
                                    <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Rounded.Save" Color="Color.Primary">Create</MudButton>
                                </div>
                            </MudPaper>
                        </EditForm>
                    }
                    else
                    {
                        <MudButton OnClick="@(() => item.CreateCard.NewTaskOpen = !item.CreateCard.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add a card</MudButton>
                    }
                </MudPaper>
            }
        </ChildContent>
        <ItemRenderer>
            <MudCard @onclick="() => EditCard(context)" Elevation="25" Class="pa-4 rounded-lg my-3 cursor-pointer">
                <MudCardHeader Class="pa-0">
                    <MudText Style="font-weight:bold" Typo="Typo.body1">@context.Title</MudText>
                </MudCardHeader>
                <MudCardContent Class="pa-0 mt-2">
                    @if (context.Labels.Any())
                    {
                        <MudPaper Class="d-flex flex-wrap" Elevation="0">
                            @foreach (var label in context.Labels)
                            {
                                <MudPaper Style="@($"color:{Colors.LightGreen.Accent3}; background-color:{label.Colour};")"
                                          Height="10px" Width="50px" Elevation="5" Class=" mr-2 mb-2 rounded-lg"></MudPaper>
                            }
                        </MudPaper>
                    }
                    @if (!string.IsNullOrEmpty(context.Description))
                    {
                        <MudPaper>@((MarkupString)context.Description)</MudPaper>
                    }
                </MudCardContent>
                <MudCardActions Class=" pa-0 pt-2">
                    <MudPaper Class="d-flex justify-start flex-grow-1 gap-2" Elevation="0">

                        @if (context.TotalItems > 0)
                        {
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Checklist" Color="@(context.TotalItemsCompleted == context.TotalItems ? Color.Success : Color.Default)" />
                            <MudText Typo="Typo.body2">
                                @context.TotalItemsCompleted / @context.TotalItems
                            </MudText>
                        }

                    </MudPaper>
                </MudCardActions>
            </MudCard>
        </ItemRenderer>
    </MudDropContainer>
}