@page "/boards/{id}/{name}"
@using Harmony.Application.DTO;
@using Harmony.Application.Helpers;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Board> _localizer

@if (KanbanStore.BoardLoading)
{
    <Loader />
}
else
{
    <MudPaper Elevation="25">
        <MudToolBar>
            <MudButton Variant="Variant.Text" OnClick="OpenCreateBoardListModal" StartIcon="@Icons.Material.Outlined.Checklist">Create list</MudButton>
            @if (KanbanStore.KanbanLists.Count() > 1)
            {
                <MudButton Variant="Variant.Text" OnClick="ReorderLists" StartIcon="@Icons.Material.Outlined.Reorder">Reorder lists</MudButton>
            }
            <MudTooltip Text="Toggle card's description visibility">
                <MudToggleIconButton @bind-Toggled:get="@CardDescriptionVisibility"
                                     @bind-Toggled:set="@ToggleCardDescriptionVisibility"
                                     Icon="@Icons.Material.Filled.VisibilityOff" Color="@Color.Error" Title="Off"
                                     ToggledIcon="@Icons.Material.Filled.Visibility" ToggledColor="@Color.Success" ToggledTitle="On" />
            </MudTooltip>
            <MudSpacer />
            <MudButton Variant="Variant.Text" OnClick="OpenShareBoardModal" StartIcon="@Icons.Material.Outlined.Share">Share board</MudButton>
            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
        </MudToolBar>
    </MudPaper>
    @if (!KanbanStore.KanbanLists.Any())
    {
        <div class="d-flex justify-center flex-grow-1 gap-4 mt-8">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h4">Your board is empty :(</MudText>
                <MudText Typo="Typo.h6">Start by adding new lists!</MudText>
                <MudIcon Icon="@Icons.Material.Outlined.AddRoad" Style="height:500px;width:500px"></MudIcon>
            </MudStack>

        </div>
    }
    else
    {
        <MudDropContainer T="CardDto" @ref="_dropContainer"
                          Items="KanbanStore.KanbanCards"
                          CanDropClass="mud-border-success" NoDropClass="mud-border-error"
                          ItemsSelector="@((item,column) => item.BoardListId.ToString() == column)"
                          ItemDropped="CardMoved" Class="d-flex flex-row">
            <ChildContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="d-flex flex-nowrap gap-4 overflow-auto flex-row mud-height-full">
                    @foreach (var item in KanbanStore.KanbanLists.OrderBy(l => l.Position))
                    {
                        <MudPaper Elevation="0" Width="300px"
                                  Style="height:calc(100vh - 200px);overflow:auto"
                                  Class="px-4 my-4 flex-none mud-background-gray rounded-lg mud-height-full">
                            <MudToolBar DisableGutters="true">
                                <EditableTextField For="@(() => item.Title)" OnEdit="(editing) => item.TitleEditing = editing"
                                                   OnSave="(text) => SaveBoardListTitle(item.Id, text)"
                                                   Text="@item.Title" />
                                <MudSpacer />
                                @if (!item.TitleEditing)
                                {
                                    <MudIconButton Style="margin-bottom:10px" Size="Size.Small" Class="align-self-end" Icon="@Icons.Material.Filled.Add"
                                                   OnClick="@(() => item.CreateCard.NewTaskOpen = !item.CreateCard.NewTaskOpen)"
                                                   aria-label="add"></MudIconButton>
                                    <MudMenu Style="margin-bottom:10px" Size="Size.Small" Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
                                             Class="align-self-end" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                        <MudButton Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => ArchiveList(item))">Archive</MudButton>
                                    </MudMenu>
                                }
                            </MudToolBar>
                            @if (item.CreateCard.NewTaskOpen)
                            {
                                <EditForm Model="item.CreateCard" OnValidSubmit="() => AddCard(item)">
                                    <DataAnnotationsValidator />
                                    <MudPaper Elevation="25" Class="pa-2 rounded-lg mt-2">
                                        <MudTextField Clearable="true" For="() => item.CreateCard.Title" Lines="1" @bind-Value="item.CreateCard.Title" Placeholder="Enter card's title.." DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                                        <div class="d-flex justify-space-around flex-grow-1 gap-4">
                                            <MudButton OnClick="@(() => item.CreateCard.NewTaskOpen = !item.CreateCard.NewTaskOpen)" StartIcon="@Icons.Material.Rounded.Cancel" Color="Color.Default">Cancel</MudButton>
                                            <MudButton Disabled="item.CreateCard.Creating" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Rounded.Save" Color="Color.Default">Create</MudButton>
                                        </div>
                                    </MudPaper>
                                </EditForm>
                            }
                            <MudDropZone T="CardDto" Identifier="@item.Id.ToString()" Style="min-height:10px" AllowReorder="true" />
                            @if (item.TotalPages > 1)
                            {
                                <div class="d-flex flex-column align-center my-4">
                                    <MudPagination Size="Size.Small" Variant="Variant.Outlined"
                                                   SelectedChanged="(page) => LoadListCards(item.Id, page)"
                                                   BoundaryCount="1" MiddleCount="1" Count="@item.TotalPages" />
                                </div>
                            }
                        </MudPaper>
                    }
                </MudContainer>
            </ChildContent>
            <ItemRenderer>
                <MudCard @onclick="() => EditCard(context)" Elevation="25" Class="pa-4 rounded-lg my-3 cursor-pointer">
                    <MudCardHeader Class="pa-0">
                        <MudText Typo="Typo.body1">@context.Title</MudText>
                    </MudCardHeader>
                    <MudCardContent Class="pa-0 mt-2">
                        <MudStack Justify="Justify.SpaceBetween">
                            @if (context.Labels.Any())
                            {
                                <MudPaper Class="d-flex flex-wrap" Elevation="0">
                                    @foreach (var label in context.Labels)
                                    {
                                        <MudTooltip Text="@label.Title">
                                            <MudPaper Style="@($"color:{Colors.LightGreen.Accent3}; background-color:{label.Colour};")"
                                                      Height="8px" Width="40px" Elevation="5" Class=" mr-2 mb-2 rounded-lg"></MudPaper>
                                        </MudTooltip>
                                    }
                                </MudPaper>
                            }
                            @if (!string.IsNullOrEmpty(context.Description) && CardDescriptionVisibility)
                            {
                                <MudPaper Style="max-height:170px;overflow-y:auto;padding:10px 0;margin-bottom:10px;">@((MarkupString)context.Description)</MudPaper>
                            }
                            <MudPaper Class="d-flex flex-wrap justify-start align-center flex-grow-1 gap-x-4 gap-y-4" Elevation="0">

                                @if (context.TotalItems > 0)
                                {
                                    <MudBadge Origin="Origin.TopRight" Color="@(context.TotalItemsCompleted == context.TotalItems ? Color.Success : Color.Info)"
                                              Overlap="false" Dot="false" BadgeClass="small-badge" Bordered="false" Icon="@Icons.Material.Filled.Checklist">
                                        <MudText Style="font-size:12px" Color="Color.Default">@context.TotalItemsCompleted / @context.TotalItems</MudText>
                                    </MudBadge>
                                }
                                @if (context.StartDate != null || context.DueDate != null)
                                {
                                    <MudBadge Origin="Origin.TopRight" Color="@(context.TotalItemsCompleted == context.TotalItems ? Color.Success : Color.Info)"
                                              Overlap="false" Dot="false" Bordered="false" Icon="@Icons.Material.Filled.DateRange">
                                        <MudText Style="font-size:12px" Color="Color.Default">@CardHelper.DisplayDates(context.StartDate, context.DueDate)</MudText>
                                    </MudBadge>
                                }
                                @if (context.TotalAttachments > 0)
                                {
                                    <MudBadge Origin="Origin.TopRight" Content="context.TotalAttachments"
                                              Overlap="true" Dot="false" Bordered="true" Color="Color.Primary">
                                        <MudIcon Icon="@Icons.Material.Filled.Attachment" Color="Color.Default" Size="Size.Medium" />
                                    </MudBadge>
                                }
                                @if (context.Members.Any())
                                {
                                    <MudAvatarGroup Max="2" Spacing="2" MaxColor="Color.Primary" MaxSize="Size.Small">
                                        @foreach (var member in context.Members)
                                        {
                                            <MudAvatar Size="Size.Small" Color="Color.Default">@member.FirstName[0]@member.LastName[0]</MudAvatar>
                                        }
                                    </MudAvatarGroup>
                                }
                            </MudPaper>
                        </MudStack>
                        
                    </MudCardContent>
                </MudCard>
            </ItemRenderer>
        </MudDropContainer>
    }
}