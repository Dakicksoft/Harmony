@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer

@using System.Security.Claims
@using Harmony.Application.DTO;
@using Harmony.Application.Features.Workspaces.Queries.GetAllForUser;
@using Harmony.Shared.Constants.Permission;
@using Harmony.Shared.Utilities;

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
    <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
        Swagger
    </MudNavLink>

    @if ((_canViewUsers || _canViewRoles) && _workspaceManager.SelectedWorkspace != null)
    {
        <MudListSubheader Class="mt-2 mb-n2">@(_selectedWorkspace?.Name ?? _workspaceManager.SelectedWorkspace?.Name)</MudListSubheader>
        @if (_canViewUsers)
        {
            <MudNavLink Href="@($"{WorkspaceUrl()}/boards")" Icon="@Icons.Material.Outlined.Dashboard">
                Boards
            </MudNavLink>
        }
        @if (_canViewRoles)
        {
            <MudNavLink Href="@($"{WorkspaceUrl()}/members")" Icon="@Icons.Material.Outlined.Groups2">Members</MudNavLink>
        }
    }

</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewRoles;
    private bool _canViewUsers;
    private WorkspaceDto _selectedWorkspace;

    protected override void OnInitialized()
    {
        _workspaceManager.OnSelectedWorkspace += SelectedWorkspaceChanged;
    }

    protected void SelectedWorkspaceChanged(object sender, WorkspaceDto selectedWorkspace)
    {
        if (_selectedWorkspace == null || (_selectedWorkspace.Id != selectedWorkspace.Id)) 
        {
            _selectedWorkspace = selectedWorkspace;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
    }

    private string WorkspaceUrl()
    {
        var workspace = _selectedWorkspace ?? _workspaceManager.SelectedWorkspace;
        var slug = StringUtilities.SlugifyString(workspace.Name);
        return $"/workspaces/{workspace.Id}/{slug}";
    }
}