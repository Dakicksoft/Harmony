@using System.Linq.Expressions;
@if (_editing)
{
    <MudForm @ref="_form" IsValidChanged="FormValidChanged">
        <MudTextField Immediate="true"
                      For="For" @bind-Value="Text"
                      Label="@Label" />
        <MudPaper Class="d-flex pa-2 flex-row-reverse">
            <MudButton Variant="Variant.Filled" OnClick="SaveValue" Disabled="!IsSaveEnabled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">Save</MudButton>
            <MudButton Variant="Variant.Filled" Class="mr-2" OnClick="CancelEditing" StartIcon="@Icons.Material.Filled.Cancel" Size="Size.Small">Cancel</MudButton>
        </MudPaper>
    </MudForm>
}
else
{
    <MudTextField ReadOnly="true" @bind-Value="@Text" Class="cursor-pointer" @onclick="() => _editing = true" />
}

@code {
    private MudForm _form;

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public object? Validator { get; set; }

    [Parameter]
    public EventCallback<string> OnSave { get; set; }

    public bool IsSaveEnabled => _form.IsValid && !_originalText.Equals(Text);

    private void FormValidChanged(bool isValid)
    {
        
    }

    private void CancelEditing()
    {
        _editing = false;
        Text = _originalText;
    }

    public async Task SaveValue()
    {
        await OnSave.InvokeAsync(Text);
    }

    [Parameter]
    public Expression<Func<string>>? For { get; set; }

    private string _originalText;

    private bool _editing;

    protected override void OnInitialized()
    {
        _originalText = Text;
    }
}
